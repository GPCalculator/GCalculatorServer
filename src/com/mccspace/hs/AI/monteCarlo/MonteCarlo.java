package com.mccspace.hs.AI.monteCarlo;

import com.mccspace.hs.AI.Continue;
import com.mccspace.hs.AI.Step;
import com.mccspace.hs.AI.monteCarlo.tree.Tree;
import com.mccspace.hs.service.game.CheckerBoard;
import com.mccspace.hs.service.game.gameplayer.GamePlayer;
import org.json.JSONObject;

import java.util.List;
import java.util.concurrent.*;

/**
 * MonteCarloÀà
 * Git to£º http://hs.mccspace.com:3000/Qing_ning/CheckerServer5.0/
 *
 * @TIME 2020/6/18 21:22
 * @AUTHOR º«Ë¶~
 */

public class MonteCarlo implements GamePlayer {

    private static int timeS = 10;

    private CheckerBoard checkerBoard = CheckerBoard.newBoard();

    public MonteCarlo(){

    }

    @Override
    public List<Integer> waitPlay() {

        ExecutorService es = new ThreadPoolExecutor(6, 12, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<Runnable>());
        for(int i=0;i<12;i++)
            es.submit(new runSeacherThread(checkerBoard));


        try {
            Thread.sleep(timeS*1000);
            Continue.ls1.stop();
            Thread.sleep(500);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        es.shutdownNow();


        Continue.ls1.clear();
        Step.ls1.clear();
        new Thread(new Runnable() {
            @Override
            public void run() {
                Tree.getTree().updateSQLTree();
            }
        }).start();
        return Tree.getTree().getNode(checkerBoard).getPro();
    }

    @Override
    public void updataChecker(CheckerBoard checkerBoard, List<Integer> upChess) {
        this.checkerBoard = checkerBoard;
    }

    @Override
    public JSONObject getInform() {
        return new JSONObject("{\"head\":\"\",\"gamenum\":100,\"drawnum\":0,\"failnum\":0,\"winnum\":200,\"sex\":\"robat\",\"name\":\"ÃÉÌØ¿¨Âå\",\"user\":\"ÃÉÌØ¿¨Âå\",\"age\":1}");
    }
}
